#!/usr/bin/env node
"use strict"

require('console-stamp')(console, { pattern: 'HH:MM:ss' });

var path = require('path'),
     cfg = require('../etc/config')

module.paths.unshift(path.join(cfg.baseDir,'lib'))

var gps       = require('gps.client'),
    wifiProto = require('wifi.protocol'),
    hopper    = require('wifi.hopper')

const fs      = require('fs'),
      os      = require('os'),
      pcap    = require('pcap'),
      RWS     = require('reconnecting-websocket'),
      WS      = require('ws'),
      program = require('commander'),
      process = require('process'),
      logger  = require('logger'),
     hostname = os.hostname(),
      utils  = require('sigmon.utils'),
      cleanup = utils.Cleanup

var statusTimer = null,
  logTimer = null

let errors = 0

var data = {
  location: { lon: 0, lat: 0, sats: 0},
  stats: { errors: 0, packets: 0, location: {},
           runtime: 0, cpu: 0, memory: 0},
  info: { start_time: new Date(), binary: cfg.wifi.hopper.binary,
          hostname: os.hostname(), interface: null,
          versions: process.versions, user: os.userInfo(),
          pid: process.pid, version: cfg.version, uptime: 0,
          debug: cfg.wifi.debug },
  config: { sensor: cfg.sensor, wifi: cfg.wifi },
  channels: []
}

program.name('sigmon.wifi.sensor')
       .version(cfg.version)
       .description('sigmon 802.11 sensor')
       .option('-A, --airmon', 'use airmon-ng to set interface to monitor mode', cfg.wifi.use_airmon_ng)
       .option('-i, --iface <interface>', 'interface to listen on', cfg.wifi.interface)
       .option('-c, --channel <channel>', 'use fixed channel', cfg.wifi.hopper.channel)
       .option('-d, --dwell <ms>', 'set channel hop dwell time', cfg.wifi.hopper.dwell)
       .option('-F, --filter <pcap filter>', 'use pcap capture filter', cfg.pcap.filter)
       .option('-n, --alias <sensor>', 'name/alias of this sensor', hostname)
       .option('-s, --hostname <hostname>', 'websocket hostname', cfg.ws.hostname)
       .option('-p, --port <port>', 'websocket port', cfg.ws.port)
       .option('-v, --verbose', 'verbose output', cfg.sensor.verbose)
       .option('--gps <gps_server>', 'gpsd server', cfg.gps.hostname)
       .option('--location <lat,lon>', 'use fixed location', `${cfg.gps.latitude},${cfg.gps.longitude}`)
       .option('--remote', 'enable remote control of this host *CAUTION*', cfg.sensor.enable_remote)
       .option('-R, --disable-reconnect', 'disable reconnecting', !cfg.sensor.reconnect)
       .option('-H, --disable-hopper', 'disable channel hopping', !cfg.wifi.hopper.enabled)
       .option('-D, --debug', 'enable debugging output', cfg.wifi.debug )

program.parse(process.argv)

cfg.wifi.hopper.enabled = !program.disableHopper
cfg.wifi.hopper.channel = program.channel
cfg.wifi.hopper.dwell = program.dwell
cfg.wifi.hopper.iface = program.iface

program.location = program.location.split(',')
cfg.gps.longitude = program.location[0]
cfg.gps.latitude = program.location[1]

data.info.interface = program.iface
data.info.debug = program.debug
data.info.hopper = !program.disableHopper
data.info.gps = cfg.gps.enabled
data.info.remote = program.remote

if(program.debug)
  logger.verbose()

logger.log(`Loading Sigmon WIFI Sensor ${data.info.version}`)

function packet_cb(buf) {
  try {
    var packet = pcap.decode.packet(buf),
            rf = packet.payload.ieee802_11Frame,
          pkt  = {}

    if(parseInt(rf.fragSeq) === 0 || parseInt(pkt.fraqSeq) === 65535)
      return

    pkt.sensor  = program.alias
    pkt.iface   = program.iface
    pkt.len     = packet.pcap_header.len

    // can also use the tv_usec data, but maybe unreliable?
    // just using recieved time on server
    //pkt.pktime  = new Date(packet.pcap_header.tv_sec * 1000)
    //pkt.time    = new Date()

    pkt.rssi    = packet.payload.signalStrength || 0
    pkt.rftype  = [rf.type, rf.subType]

    // I think this is the channel the receiver was on when the packet was captured
    pkt.freq    = packet.payload.frequency
    pkt.channel = wifiProto.getChannel(pkt.freq)

    pkt.mac     = rf.shost.toString().toLowerCase()
    pkt.seq     = rf.fragSeq

    pkt.lon     = gps.location.lon
    pkt.lat     = gps.location.lat

    pkt.bssid   = rf.bssid.toString()
    pkt.src     = rf.shost.toString()
    pkt.dst     = rf.dhost.toString()

    try {
      if(rf.type === 0 && [3,5,8,11].includes(parseInt(rf.subType))) {
        //logger.debug(`AP packet with type ${rf.type}:${rf.subType} from ${pkt.mac}`)
        pkt.type = 'ap'

        if((rf.subType == 8) && rf.hasOwnProperty('beacon') && rf.beacon.hasOwnProperty('tags'))
          for(var tags in rf.beacon.tags) {
            var tag = rf.beacon.tags[tags]

            if(tag.type == 'channel' && parseInt(tag.channel) > 0) {
              pkt.channel = parseInt(tag.channel) 
              pkt.freq    = wifiProto.getFrequency(pkt.channel)
            }

            if(tag.type == 'ssid' && tag.ssid.length)
              pkt.ssid = tag.ssid.toLocaleString()

            if(tag.type == 'rates')
              try {
                pkt.boottime = tag.value.readInt32LE()
                pkt.uptime = new Date() - new Date(pkt.boottime)
              } catch (e) { }
          }
      } else
      if (rf.type === 0 && [1,2,4,10,12].includes(parseInt(rf.subType))) {
        //logger.debug(`STA packet with type ${rf.type}:${rf.subType} from ${pkt.mac}`)
        pkt.type = 'sta'

        if((rf.subType == 4) && rf.hasOwnProperty('probe') && rf.probe.hasOwnProperty('tags'))
          for(var tags in rf.probe.tags) {
            var tag = rf.probe.tags[tags]

            if(tag.type == 'ssid' && tag.ssid.length)
              pkt.ssid = tag.ssid
          }
      } else {
        if(!utils.validmac(pkt.src)) // || !utils.validmac(pkt.bssid))
          return

        //logger.debug(`Unknown packet with type ${rf.type}:${rf.subType} from ${pkt.mac}`)
      }
    } catch (e) {
        logger.log(`Reading tags: ${e}`)
        //console.dir(rf)
    }

    if(!pkt.hasOwnProperty('ssid') || (pkt.hasOwnProperty('ssid') && pkt.ssid.length <= 1) ||
      ((pkt.ssid[0] == '\u0000') && (pkt.ssid[pkt.ssid.length - 1] == '\u0000')))
      if([1,3,5,8].includes(rf.subType))
        pkt.ssid = '[hidden]'
      else if([0,2,4].includes(rf.subType))
        pkt.ssid = '[any]'

    const msg = JSON.stringify({type: 'data', source: 'wifi', interface: program.iface,
                          sensor: program.alias, location: gps.location, data: pkt})
    ws.send(msg)

    data.stats.packets += 1
    data.stats.totalBytes += pkt.len
  } catch (e) {
    if(!String(e).startsWith('Not enough of packet left') &&
       !String(e).startsWith('RangeError')) {
      logger.debug(`packet_cb: ${e}`)
      //console.dir(e)
      return data.stats.errors += 1
    }
  }
}

function updateStats() {
  const now = new Date()

  data.location = gps.location

  data.stats.cpu = process.cpuUsage()
  data.stats.memory = process.memoryUsage()

  data.stats.runtime = now - data.info.start_time
  data.info.uptime = os.uptime()

  data.info.debug = program.debug
  data.info.hopper = !program.disableHopper

  if(data.config.sensor != cfg.sensor)
    data.config.sensor = cfg.sensor

  if(data.config.wifi != cfg.wifi)
    data.config.wifi = cfg.wifi
}

function sendStatus() {
  updateStats()
  ws.send(JSON.stringify({type: 'status', sensor: program.alias, data: data}))
}

function sendLogs() {
  var lines = logger.lastlog()

  if(lines.length)
    ws.send(JSON.stringify({ type: 'log', sensor: program.alias, data: lines }))
}


// preferred: cfg.ws.protocol://cfg.ws.server:cfg.ws.port/cfg.ws.endpoint
var sniffer = pcap.createSession(program.iface, program.pcapfilter ),
         ws = new RWS(`ws://${program.hostname}:${program.port}/ws`, [], { WebSocket: WS, debug: cfg.ws.debug } )

sniffer.on('error', (error) => {
  logger.error('pcap')
})

ws.addEventListener('open', () => {
  console.debug('Connected to websocket ' + program.hostname)

  logTimer = setInterval(sendLogs, cfg.sensor.log_interval)

  if(!cfg.gps.enabled) {
    logger.log(`Using fixed GPS location: ${cfg.gps.longitude}, ${cfg.gps.latitude}`)
    gps = { location: { lat: cfg.gps.latitude, lon: cfg.gps.longitude, sats: 0 } }
  }

  if(program.disableHopper)
    hopper.set_channel(program.channel)
  else
    hopper.start(program.iface)

  sniffer.on('packet', packet_cb)
  logger.log('Listening on ' + sniffer.device_name)

  data.channels = hopper.list_channels()

  ws.send(JSON.stringify({ cmd: 'channels', data: data.channels, sensor: program.alias }))
})

ws.addEventListener('close', () => {
  if(hopper.running)
    hopper.stop()

  if(program.disableReconnect)
    cleanExit('disconnected-no-reconnect')
})

ws.addEventListener('message', message => {
  // type: [ (un)track | debug | restart | exit | channel | status | log | osrestart | osreboot | terminal ]
  try {
    var msg = JSON.parse(message)
    //logger.debug(`Message: ${message}`)

    if(msg.hasOwnProperty('cmd'))
      if(msg.cmd == 'debug')
        program.debug = !program.debug
      else
      if(msg.cmd == 'filter')
        program.filter = msg.arg
      else
      if(msg.cmd == 'restart') {
        // spawn myself? pm2 restart .. ?
        cleanExit('restart')
      }
      if(msg.cmd == 'exit')
        cleanExit('requested')
      else
      if(msg.cmd == 'status')
        sendStatus()
      else
      if(msg.cmd == 'channel' && msg.hasOwnProperty(arg))
        hopper.set_channel(msg.arg)
      else
      if(cfg.remote.includes(msg.cmd) && (msg.cmd == 'osshutdown' || msg.cmd == 'osreboot')) {
        require('child_process').spawn(msg.cmd.slice(2))
        cleanExit(msg.cmd)
      } else
      if(cfg.remote.includes(msg.cmd) && msg.cmd == 'terminal') {
        logger.debug('@root:/# ')
        // launch an xterm.js process and send back the port
      }
      else {
        logger.error('pcap')
        logger.error(`Unparsable message: ${msg}`)
      }
    } catch (e) {
        logger.error(`Parsing message: ${e}`)
    }
})

process.on('beforeExit', cleanExit)

function cleanExit(reason=420) {
  var output = [`exiting: ${reason}`]

  hopper.stop()

  if(data.stats.errors) {
    output.push(`with #errors: ${data.stats.errors}`)
  }

  ws.send(JSON.stringify({type: 'status', stats: data.stats, time: new Date(), data: output.join(' ')}))

  process.exit(0)
}

ws.addEventListener('error', (e) => {
  logger.error(`WebSocket client: ${e.error}`)
})

statusTimer = setInterval(sendStatus, cfg.sensor.status_interval)

cleanup(cleanExit)
