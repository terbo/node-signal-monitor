#!/usr/bin/env node
'use strict';

require('console-stamp')(console, { pattern: 'HH:MM:ss' })

/*# first page
#  status | keys
#  device table | device info
#  log
# second page
#  hosts/channel
#  channel graph
# third page
#  packets per sensor
#  packets per channel
#  packets per minute
#  packets per hour ...
# fourth page
#  full status table
#  status of each sensor
#  status of database
#  connected clients
# fifth page?
# all ssids/grouped clients
# settings
*/

var path = require('path'),
     cfg = require('../etc/config')

module.paths.unshift(path.join(cfg.baseDir, 'lib'))

const extend   = require('extend'),
      sortkeys = require('sort-keys'),
      sprintf  = require('sprintf-js').sprintf,
      process  = require('process'),
      program  = require('commander'),
       player  = require('node-wav-player'),
       utils = require('sigmon.utils'),
           hmn = require('human-number'),
           RWS = require('reconnecting-websocket'),
            WS = require('ws')

const wifiChannels = require('wifi.protocol').frequencies,
       getDuration = utils.getDuration,
            Sensor = require('device.sensor'),
     deviceSession = require('device.session').deviceSession

program.name('sigmon.console.client')
       .version(cfg.version)
       .description('curses browser for collected device information')

program.option('-s, --hostname <server>', 'sigmon server to connect to', cfg.ws.hostname)
       .option('-p, --port <port>', 'port to connect to', cfg.ws.port)
       .option('-l, --layout <layout>', 'layout to use', cfg.console.default_layout)
       .option('-A, --alert <mac/ssid>', 'display alerts for devices', cfg.devices.alert)
       .option('-T, --track <mac/ssid>', 'display detailed information for devices', cfg.devices.track)
       .option('-I, --ignore <mac/ssid>', 'ignore devices', cfg.devices.ignore)
       .option('-S, --disable-sound', 'disable sound', !cfg.console.sound)
       .option('-D, --debug', 'enable debugging output',  cfg.console.debug)

program.parse(process.argv)

var blessed = require('blessed'),
     contrib = require('blessed-contrib'),
     screen = blessed.screen({ debug: true,
                               smartCSR: true,
                               dockBorders: true,
                               ignoreDockContrast: true,
                               autoPadding: true
                              })
var devices = {},
    sensor_list = {},
    packetGraph = {},
    channelGraph24 = [],
    channelGraph58 = []

var sortType     = 2,
    filterType   = 0,
    reverse      = true,
    displayType  = 1,
    displayTypes = ['all','ap','sta'],
    redraw = true,
    drawJSON = false,
    gpsLock = false,
    channel_list24 = [],
    channel_list58 = [],
    logbuf = '', infobuf = ''

var devices_grid, deviceTable, graphics_grid1, graphics_grid2, status1_markdown, status2_markdown, device_markdown,
    status1, status2, server_log, packet_graph, channel_bar24, channel_bar58, device_markdown, status_info, keys, info_log

var dim = cfg.console.layouts[program.layout]

// Dimensions for table - yaml?

//               //
/*               */
 // Sort Funcs  //
/*               */
//               //


const sortFn = [ sortByType, sortVendor, sortRSSI, sortSSID, sortChannel, sortLast, sortClients, sortBytes ]
const sortTypes = ['Type', 'Vendor', 'RSSI', 'SSID', 'Channel','Lastseen','STAs','Bytes']
const filterTypes = ['None','Proximity','Far','OUI','Unknown','Owned','Regular','Recent', 'New', 'Alert'] // Quiet / Loud
const deviceHeaders = ['Type', 'Sensors', 'MAC', 'SSID', 'RSSI', 'Ch', 'Vendor','Last Seen','STAs','Bytes', 'Tags']


// static, morse codes, trunks, sattelites, then
playwav('sigmon.signon')


function sortByType(a,b) {
  if(devices[a].type > devices[b].type)
    if(reverse) return -1
    else return 1
  if(devices[a].type < devices[b].type)
    if(reverse) return 1
    else return -1
  return 0
}

function sortClients(a,b) {
  if(reverse)
    return devices[b].hosts.length - devices[a].hosts.length
  else
    return devices[a].hosts.length - devices[b].hosts.length
}

function sortFirst(a,b) {
  if(reverse)
    return new Date(devices[b].firstseen).getTime() - new Date(devices[a].firstseen).getTime()
  else
    return new Date(devices[a].firstseen).getTime() - new Date(devices[b].firstseen).getTime()
}

function sortBytes(a,b) {
  if(reverse)
    return devices[b].totalBytes - devices[a].totalBytes
  else
    return devices[a].totalBytes - devices[b].totalBytes
}

function sortLast(a,b) {
  if(reverse)
    return new Date(devices[b].lastseen).getTime() - new Date(devices[a].lastseen).getTime()
  else
    return new Date(devices[a].lastseen).getTime() - new Date(devices[b].lastseen).getTime()
}

function sortSSID(a,b) {
  if(devices[a].ssid.toUpperCase() > devices[b].ssid.toUpperCase())
    if(reverse) return -1
    else return 1

  if(devices[a].ssid.toUpperCase() < devices[b].ssid.toUpperCase())
    if(reverse) return 1
    else return -1
  return 0
}

function sortChannel(a,b) {
  if(reverse)
    return devices[b].channel - devices[a].channel
  else
    return devices[a].channel - devices[b].channel
}

function sortRSSI(a,b) {
  if(reverse)
    return devices[b].rssi - devices[a].rssi
  else
    return devices[a].rssi - devices[b].rssi
}

function sortVendor(a,b) {
  if(devices[a].vendor.toUpperCase() > devices[b].vendor.toUpperCase())
    if(reverse) return 1
    else return -1
  if(devices[a].vendor.toUpperCase() < devices[b].vendor.toUpperCase())
    if(reverse) return -1
    else return 1
  return 0
}


/*               */
/*               */
 //   Output    //
/*               */
/*               */


function playwav(snd) {
  if(!program.disableSound) {
    //status1.log(`Playing '${snd}.wav'`)
    player.play({path: path.join(cfg.baseDir,`data/sounds/${snd}.wav`)}).then(() => {
      }).catch((error) => { status1.log(`Error playing ${snd}.wav: ${error}`) })
  }
}

function update() {
  var rows = [],
      now = new Date(),
      nowH = now.getHours().toString().padStart(2,0) + ':' +
             now.getMinutes().toString().padStart(2,0) + ':' +
             now.getSeconds().toString().padStart(2,0),
      nowS = now.getTime()


  Object.keys(sortkeys(devices,{compare: sortFn[sortType]})).forEach(mac => {
    var dev = devices[mac],
        sensors = '',
        lastseen = new Date(dev.lastseen).getTime(),
        firstseen = new Date(dev.firstseen).getTime()

    dev.tags = devices[mac].tags

    if(dev.tags.includes('ignore'))
      return

    if(dev.tags.includes('alert')) {
      status1.log(`ALERT device ${mac}`)
      playwav('alert')
      status1.log(`${mac} seen @ ${now}`)
    } 

    dev.sensors.forEach(sensor => {
      if(!sensor_list.hasOwnProperty(sensor)) {
        playwav('sensor_in')

        sensor_list[sensor] = { firstseen: new Date(),
                                lastseen: new Date(),
                                totalPackets: 1,
                                config:  {},
                                stats: {},
                                info: {},
                                location: {},
                                active: true,
                            }
        packetGraph[sensor] = { title: sensor, style: { line: cfg.console.sensor_colors.pop()}, x: [], y: [] }
      }

      var lastIdx = packetGraph[sensor].x.length - 1 // get the index of the last data column

      if(packetGraph[sensor].x[lastIdx] != nowH)
        packetGraph[sensor].x.push(nowH)

      var lastCol = packetGraph[sensor].y.length - 1

      if(lastCol < lastIdx)
        packetGraph[sensor].y[lastIdx] = 1 // now increase the number of packets
      else
        packetGraph[sensor].y[lastIdx] += 1
    })

    // just increments same devices..
    // need to check if device has updated since last displayed
    // or just retrieve the channel map from each sensor.

    if(dev.type == 'ap') {
      if(Object.values(wifiChannels['g']).includes(dev.channel.toString()))
        channelGraph24[channel_list24.indexOf(dev.channel.toString())] += 1
      else
        channelGraph58[channel_list58.indexOf(dev.channel.toString())] += 1
    }

    if(filterTypes[filterType] == 'Recent' && (nowS > (lastseen + cfg.device.new_timeout)))
      return
    else  if(nowS < (lastseen + cfg.device.new_timeout) && (!dev.tags.includes('recent')))
      dev.tags.push('recent')

    if(filterTypes[filterType] == 'Owned' && (!dev.tags.includes('owned')))
      return

    if(displayTypes[displayType] == 'ap' && dev.type != 'ap')
      return

    if(displayTypes[displayType] == 'sta' && dev.type != 'sta')
      return

    // not being removed
    /*if(nowS < (firstseen + cfg.device.new_timeout) && (!dev.tags.includes('new')))
      dev.tags.push('new')

    else if(dev.sessions.sessions.length > 1 && (!dev.tags.includes('session'))) //((firstseen - nowS) > 30000) && (now < (lastseen + 3000)))
      dev.tags.push('session')

    if(dev.rssi > cfg.device.close_rssi && (!dev.tags.includes('proximity')))
      dev.tags.push('proximity')
    else if(dev.rssi < cfg.device.far_rssi && (!dev.tags.includes('far')))
      dev.tags.push('far')

    if((dev.vendor == 'Unknown' || dev.ssid == '[hidden]') && (!dev.tags.includes('unknown')))
      dev.tags.push('unknown')
    else if(!dev.tags.includes('oui'))
      dev.tags.push('oui')
    */

    if(dev.sensors.length > 1)
      sensors = `${dev.sensors[0]},+${(dev.sensors.length) - 1}`
    else
      sensors = dev.sensors[0]


    if(filterType === 0 || dev.tags.includes(filterTypes[filterType].toLowerCase()))
      try { //dev.mac.substr(0,8) + ' ' + dev.mac.substr(12,14) - but I search for mac address on table selection...
        rows.push([ dev.type.toUpperCase(), sensors, dev.mac, dev.ssid.substr(0,20).padEnd(20,' '), dev.rssi, dev.channel,
                   dev.vendorSm, new Date(lastseen).toTimeString().split(' ')[0], dev.hosts.length, hmn(dev.totalBytes.toPrecision(2)), dev.tags.toString()])
      } catch(e) {
        status1.log(`Draw Device: ${e}`)
      }
    })

  if(carousel.currPage === 0 && status_info) {
    var out, out2, running = 0, loc = {},
      mem = hmn(status_info.stats.memory.rss.toPrecision(3)),
      dbsize = hmn(status_info.stats.dbsize.toPrecision(3)) 

    if(!gpsLock && (status_info.location.sats >= 5)) {
      playwav('gpslock')
      gpsLock = true
    }
    else if (gpsLock && (status_info.location.sats <= 4)) {
      playwav('gpslost')
      gpsLock = false
    }

    // need to replace the status_info cruft..
    out = ` Total APs: __${status_info.stats.aps}__ STAs: __${status_info.stats.stas}__` +
          ` (Showing ${Object.keys(devices).length}) ` +
          ` Packets: __${hmn(status_info.stats.packets.toPrecision(3))}__\n` +
          ` Showing ${displayTypes[displayType].toUpperCase()} Filtering ${filterTypes[filterType]}` +
          ` sorting${reverse ? ' reverse ' : ' '}by ${sortTypes[sortType]}\n` +
          ` ${ !redraw ? '{bold}{red-fg}\t\t\t\t\tPaused updating{/}{/}' : ''}`

    loc.lon = status_info.location.lon || 0
    loc.lat = status_info.location.lat || 0
    loc.sats = status_info.location.sats || 0

    if(loc.lon && loc.lon !== 0)
      loc.lon = Number(loc.lon).toPrecision(7)

    if(loc.lat && loc.lat !== 0)
      loc.lat = Number(loc.lat).toPrecision(7)

    out2 = ` Lon/Lat: __${loc.lon}__, __${loc.lat}__` +
           `  Sats: __${loc.sats}__\n` +
           ` Mem: {bold}${mem}{/} DB: {bold}${dbsize}{/}\n\n` +
           ` Server: {bold}${status_info.info.hostname}{/} on` +
           ` {green-fg}${status_info.info.version} (Running ${status_info.stats.runtime}) {/}`

    var sensors = '',
            now = new Date()

    Object.keys(status_info.sensors).forEach(sensor => {
      sensors += `__${sensor}__ ${hmn(status_info.sensors[sensor].totalPackets)}`
      var last = new Date(status_info.sensors[sensor].lastseen).getTime()
      var lastseen = now.getTime() - last
        try{sensors += `/${getDuration(status_info.sensors[sensor].stats.runtime)} `} catch(e) { sensors += ' '}
      //else console.dir(status_info.sensors[sensor])
      if(lastseen > 60000) {
        sensor_list[sensor].active = false
        sensors += '(DC) '
      }
    })

    out += `\n ${sensors}`

    status1_markdown.setMarkdown(out)
    status2_markdown.setMarkdown(out2)
  }

  if(carousel.currPage == 1) {
    if(Object.keys(packetGraph).length)
      packet_graph.setData(Object.values(packetGraph))

    try {
      channel_bar24.setData({ titles: channel_list24, data: channelGraph24 })
      channel_bar58.setData({ titles: channel_list58, data: channelGraph58 })
    } catch (e) {
      status1.log(`Channel Graph: ${e}`)
    }
  }

  if(redraw && carousel.currPage === 0)
    try {
      deviceTable.setData({ headers: deviceHeaders, data: rows})
    }
    catch (e) {
      status1.log(`deviceTable.setData: ${e}`)
    }

  screen.render()
}

function drawInfo(mac) {
  var dev = devices[mac],
      out

  if(!drawJSON) {
    out =  ` MAC:  ${dev.mac}\n` +
           ` Vendor:  ${dev.vendor}\n\n`

           if(dev.type == 'ap') {
             out += ` SSID: ${dev.ssid}\n` +
                    ` Channel ${dev.channel} (${dev.freq} Mhz)\n`

             var uptime = 0
             if(dev.hasOwnProperty('boottime'))
                uptime = getDuration(new Date() - new Date(dev.boottime))
             else
                uptime = getDuration(new Date() - new Date(dev.uptime))
             if(uptime)
               out += ` Uptime: ${uptime}\n\n`
             else
               out += '\n'
           }
    out += ` First seen: ${new Date(dev.firstseen).toLocaleString()}\n` +
           ` Last seen: ${new Date(dev.lastseen).toLocaleString()}\n\n` +

           ` Last/Avg/Min/Max RSSI ${dev.lastrssi}/${dev.avgrssi}/${dev.minrssi}/${dev.maxrssi}\n` +
           ` Last Seq#: ${dev.lastseq}\n\n`

    out += ` Seen by: ${dev.sensors.join(', ')}\n\n` +

           ` Sessions: ${dev.sessions.sessions.length}\n`;

    if(dev.sessions.sessions.length) {
      dev.sessions = new deviceSession(false, dev.sessions.sessions)
      out += `  Duration: ${getDuration(new Date(dev.sessions.first('duration')))}\n` +
             `  Enter: ${new Date(dev.sessions.first().enter).toLocaleString()}\n` +
             `  Exit: ${new Date(dev.sessions.first().exit).toLocaleString()}\n`

      if(dev.sessions.sessions.length > 1)
        out += `  Duration: ${getDuration(new Date(dev.sessions.last('duration')))}\n` +
               `  Enter: ${new Date(dev.sessions.last().enter).toLocaleString()}\n` +
               `  Exit: ${new Date(dev.sessions.last().exit).toLocaleString()}\n`
    }

    out += `  Last location: ${dev.sessions.last('loc')}\n\n` +
           ` Total Packets/Bytes: ${hmn(dev.totalPackets.toPrecision(2))}/${hmn(dev.totalBytes.toPrecision(2))}\n\n`

    if(dev.type == 'ap')
      out += ` Clients:\n`
    else
      out += ` Probed SSIDs:\n`

      dev.hosts.forEach(h => {
        if(dev.type == 'ap' && devices.hasOwnProperty(h)) {
          out += `  ${devices[h].mac}  ${devices[h].vendorSm} (${devices[h].rssi})\n`
          out += `    Last Seen: ${new Date(devices[h].lastseen).toLocaleString()}\n`
        } else {
          out += `  ${h}\n`
        }
      })
  } else
    out = JSON.stringify(dev,'',2)

  info_log.logLines = []
  out.split('\n').forEach(line => { info_log.log(line) })

  status1.log(`Showing info for {bold}${mac}{/}`)
  update()
}

function do_search(err, data) {
  if (err) throw err;

  searchBox.hide()
  var re = new RegExp(data,'i')
  var matches = []

  // now need to be able to submit database searches..
  Object.keys(devices).forEach((mac) => { 
    Object.keys(devices[mac]).forEach((field) => {
      try{if(devices[mac][field].toString().match(re) && (!['vendorSm','_id'].includes(field)))
        matches.push(`${mac}: ${field} ${devices[mac][field]}`)} catch(e) { status1.log(mac) }
    })
  })

  if(Object.keys(matches).length) {
    status1.log(`Found ${matches.length} matches for {bold}${data}{/}`)

    searchBox.hide()
    searchResults.setItems(matches)
    searchResults.show()
    searchResults.focus()
    screen.render()
  }
}

function do_exit(s) {
  screen.destroy()
  screen.program.clear()
  screen.program.disableMouse()
  screen.program.showCursor()
  screen.program.normalBuffer()
  ws.close()

  process.exit(2)
}


/*              */
/*              */
 //  Keybinds  //
/*              */
/*              */


screen.key(['escape', 'q', 'C-c'], do_exit)

/*
screen.key('F1', () => { // full help screen
screen.key('d', () => { // full device page })
screen.key('o', () => { // options })
screen.key('C-f', (ch, key) => { // make box with all filters checkbox })
screen.key('C-r', (ch, key) => { // unload all but recent devices
screen.key('e', (ch, key) => { // add device to a list
screen.key('[-,+]', => // resize widgets/spacing/etc
enable active pcap sniffing of device/range/IP/ssid?
*/

screen.key('C-d', () => { ws.send(JSON.stringify({'cmd': 'dump'})) })

screen.key('C-s', () => {
  program.disableSound = !program.disableSound
  status1.log('Sound ' + (program.disableSound ? 'disabled' : 'enabled'))
})

screen.key('s', (ch, key) => {
  if(carousel.currPage !== 0)
    return

  sortType = (sortType < Object.keys(sortFn).length - 1) ? sortType + 1 : 0

  status1.log(`Sorting by ${sortTypes[sortType]}`)
  update()
})

screen.key('a', (ch, key) => {
  if(carousel.currPage !== 0)
    return 

  displayType = displayType < displayTypes.length - 1? displayType + 1 : 0

  status1.log(`Displaying ${displayTypes[displayType].toUpperCase()}`)
  update()
})

screen.key('r', (ch, key) => {
  if(carousel.currPage !== 0)
    return 
  reverse = !reverse
  update()
})

screen.key('f', (ch, key) => {
  if(carousel.currPage !== 0)
    return

  filterType = filterType < filterTypes.length - 1? filterType + 1 : 0
  status1.log(`Filtering ${filterTypes[filterType]}`)
  update()
})

screen.key('i', (ch, key) => {
  if(carousel.currPage !== 0)
    return

  drawJSON = !drawJSON

  if(drawJSON)
    status1.log('Drawing JSON in Info Window')
  else
    status1.log('Drawing Markdown in Info Window')

  screen.render()
})

screen.key('m', (ch, key) => {
  if(carousel.currPage !== 0)
    return
  if(searchResults.focused) {
    searchResults.hide()
    deviceTable.show()
    deviceTable.focus()
  }
  else
    searchResults.show()
    searchResults.focus()
  screen.render()
})

screen.key('z', (ch, key) => {
  if(carousel.currPage !== 0)
    return 

  redraw = !redraw

  if(redraw)
    status1.log('Redraw enabled')
  else
    status1.log('Redraw disabled')

  update()
})

screen.key('h', () => {
  if(helpBox.focused) {
    helpBox.hide()
    deviceTable.show()
    deviceTable.focus()
  } else {
    //status1.log('Showing help')
    helpBox.show()
    helpBox.focus()
  }
  screen.render()
})

screen.key('/', () => {
  if(carousel.currPage === 0) {
    searchBox.show()
    searchBox.focus()
    searchBox.input('Search:', '', do_search)
  }
})

screen.key('tab', () => {
  if(carousel.currPage == (carousel.pages.length - 1)) {
    carousel.home()
    if(logbuf.length)
      logbuf.forEach(line => { status1.log(line) })
    if(infobuf.length)
      infobuf.forEach(line => { info_log.log(line) })

    deviceTable.show()
    if(!deviceTable.focused)
      deviceTable.focus()
  }
  else {
    logbuf = status1.logLines
    infobuf = info_log.logLines
    carousel.next()
  }
  redraw = true 
  update()
})

// table / info / logs
// channels / graph
// device page
// sensors
// logs

screen.key(['1','2'], (ch, key) => {
  if(carousel.currPage == 1) {
   logbuf = status1
   } else {
    if(logbuf.length)
      try{status1.log(JSON.stringify(logbuf))} catch (e) {}
  }
  status1.log('Switching to channel ' + carousel.currPage)

  carousel.currPage = ch - 1
  carousel.move()

  redraw = true 
  update()
})


//               //
/*               */
 //  Web Socket //
/*               */
//               //


var ws = new RWS(`ws://${program.hostname}:${program.port}/ws`, [], { WebSocket: WS, debug: cfg.ws.debug } )

ws.addEventListener('open', () => {
  status1.log('Connected to websocket ' + program.hostname)
  ws.send(JSON.stringify({cmd: 'subscribe', client: program.name(), arg: 'latest' }))
  ws.send(JSON.stringify({cmd: 'subscribe', client: program.name(), arg: 'logs' }))
  ws.send(JSON.stringify({cmd: 'channels', client: program.name() }))
})

ws.addEventListener('error', e => {
  status1.log(`WS Client: ${e.error}`)
})

ws.addEventListener('message', message => {
  var msg = JSON.parse(message.data)

  if(msg.type == 'channels') {
      status1.log(`got Channels: ${JSON.stringify(msg.data)}`)
      msg.data.forEach(channel => {
        channel = channel.toString()

        if(Object.values(wifiChannels['g']).includes(channel)) {
          channel_list24.push(channel)
          channelGraph24.push(0)
        } else {
          channel_list58.push(channel)
          channelGraph58.push(0)
        }
      })
    return
  } else
  if(msg.type == 'log') {
    msg.data.forEach((line) => { status1.log(`${line.time}  ${line.source}: ${line.log}`) })
    return
  }

  var oldnum = Object.keys(devices).length,
      newnum = Object.keys(msg.data.db).length,
      total = 0

  extend(true, devices, msg.data.db)
  total = Object.keys(devices).length

  if(total > oldnum)
    playwav('packet')

  status_info  = { stats: msg.data.stats, info: msg.data.info, sensors: msg.data.sensors, location: msg.data.location || msg.location }

  update()
})

    //             //
   /*             */
  //  Widgets    //
 /*             */
//             //


function devices_page() {
  devices_grid = new contrib.grid({ rows: dim.scr.r, cols: dim.scr.c, screen: screen })

  status1_markdown = devices_grid.set(dim.status1.h, dim.status1.w, dim.status1.x,dim.status1.y, contrib.markdown, {
    tags: true,
    interactive: false
  })

  status2_markdown = devices_grid.set(dim.status2.h, dim.status2.w, dim.status2.x,dim.status2.y, contrib.markdown, {
    tags: true,
    interactive: false
  })

  deviceTable = devices_grid.set(dim.devTable.h, dim.devTable.w, dim.devTable.x,dim.devTable.y, contrib.table, {
    keys: true,
    mouse: true,
    vi: true,
    tags: true,
    fg: 'white',
    selectedFg: 'white',
    selectedBg: 'blue',
    label: 'Active',
    noCellBorders: true,
    interactive: true,
    width: dim.devTb.w,
    height: dim.devTb.h,
    border: {
     type: 'ascii',
     fg: 'cyan'},
    columnSpacing: 3, // in chars
    columnWidth: dim.devTbCols })

  deviceTable.rows.on('select',(i,idx) => {
    try {
      if(i && i.hasOwnProperty('content') && i.content.length) {
        var selected = i.content.match(/[A-F0-9:]{17}|[A-F0-9]{12}/gi)

        if(selected)
          drawInfo(selected[0])
      }
    } catch (e) {
      status1.log(`Table Select: ${e}`)
    }
  })

  info_log = devices_grid.set(dim.info.x,dim.info.y, dim.info.h, dim.info.w, contrib.log, {
    label: 'info',
    tags: true,
    bufferLength: 64,
    scrollBack: 64,
  })

  status1 = devices_grid.set(dim.logger.x,dim.logger.y,dim.logger.h,dim.logger.w, contrib.log, {
    fg: 'green',
    padding: 1,
    tags: true,
    bufferLength: 64,
    scrollBack: 64,
    selectedFg: 'green',
    label: 'log'})

  deviceTable.show()
  deviceTable.focus()

  screen.append(helpBox)
  screen.append(searchBox)
  screen.append(searchResults)
  searchResults.hide()

  helpBox.focus()
}

function graphics_page1() {
  graphics_grid1 = new contrib.grid({rows: dim.scr.r, cols: dim.scr.c, screen: screen})

  channel_bar24 = graphics_grid1.set(dim.chanbar24.x,dim.chanbar24.y,dim.chanbar24.h,dim.chanbar24.w, contrib.bar, {
    label: 'Channel Usage - 2.4Ghz',
    barWidth: dim.chanbar24.barWidth,
    barSpacing: dim.chanbar24.barSpacing,
    xOffset: dim.chanbar24.offset,
    maxHeight: dim.chanbar24.maxHeight
  })

  channel_bar58 = graphics_grid1.set(dim.chanbar58.x,dim.chanbar58.y,dim.chanbar58.h,dim.chanbar58.w, contrib.bar, {
    label: 'Channel Usage - 5.8Ghz',
    barWidth: dim.chanbar58.barWidth,
    barSpacing: dim.chanbar58.barSpacing,
    xOffset: dim.chanbar58.offset,
    maxHeight: dim.chanbar58.maxHeight
  })

  packet_graph = graphics_grid1.set(dim.pktGraph.h, dim.pktGraph.w, dim.pktGraph.x, dim.pktGraph.y, contrib.line, {
    style: {
      line: 'yellow',
      text: 'green',
      baseline: 'black'},
    xLabelPadding: 4,
    xPadding: 4,
    showLegend: true,
    wholeNumbersOnly: true, //true=do not show fraction in y axis
    label: 'Packets'
  })

  screen.append(helpBox)
}

/*function graphics_page2() {
  graphics_grid2 = new contrib.grid({rows: dim.scr.r, cols: dim.scr.c, screen: screen})

}*/

var searchResults = blessed.list({  
  parent: screen,
  title: 'search results',
  width: '40%',
  height: '30%',
  top: 'center',
  left: 'center',
  align: 'center',
  fg: 'white',
  border: {
    type: 'line'
  },
  selectedBg: 'blue',
  mouse: true,
  keys: true,
  vi: true,
  tags: true,
})

searchResults.on('select',(i,idx) => {
  if(carousel.currPage === 0)
    try {
      if(i && i.hasOwnProperty('content') && i.content.length) {
        var mac = i.content.split(': ')[0]
        drawInfo(mac)
        searchResults.hide()
        deviceTable.focus()
        screen.render()
      }
    } catch (e) {
      status1.log(`Search: ${e}`)
    }
})

var searchBox = blessed.prompt({
  parent: screen,
  left: 'center',
  top: 'center',
  width: dim.sBox.w,
  height: dim.sBox.h,
  border: 'line'
})

var helpText,
    helpBox = blessed.box({
    parent: screen,
    top: 'center',
    left: 'center',
    width: 42,
    draggable: true,
    height: 21,
    padding: 1,
    tags: true,
    border: {
      type: 'ascii',
      fg: 'green'
      },
    })

// Workaround for centering shrunken box.
  helpBox.on('prerender', function() {
    var lpos = helpBox._getCoords(true)
    if (lpos)
      helpBox.rleft = (screen.width - (lpos.xl - lpos.xi)) / 2 | 0
  })

helpText = `{center}{bold}sigmon console version ${cfg.version}{/}` +
           '\n\n\n' +
           '[tab] change view [a] display type\n' +
           '[s] sort [r] reverse [enter/l] info\n\n' +
           '[/] search [m] toggle results\n' +
           '[f] filter [z] pause [q] quit' +
           '\n\n' +
           'Ctrl-D: Request server data\n' +
           'Ctrl-S: Toggle Sound\n\n' +
           //'\tpress F1 for more help\n' +
           'press any key to dismiss\n\n\n' +
           '<http://sigmon.app> (c) 2015-2019'

helpBox.setContent(helpText)

helpBox.on('keypress', () => {
  helpBox.hide()
  deviceTable.show()
  deviceTable.focus()
  screen.render()
})

var carousel = new contrib.carousel(
                    [devices_page, graphics_page1],
                    { screen: screen, interval: 0, controlKeys: false })

carousel.start()
setTimeout(() => { helpBox.hide() }, 1000)
