#!/usr/bin/env node
"use strict"

var cfg  = require('../etc/config')
module.paths.unshift(cfg.baseDir+'lib')

const fs       = require('fs'),
      os       = require('os'),
      WS       = require('ws'),
      process  = require('process'),
      program  = require('commander')


const smutils       = require('smutils'),
      store = require('db-nedb'),
			getVendor     = smutils.getVendor,
			getDuration   = smutils.getDuration,
      wifiDevice    = require('wifiDevice').wifiDevice,
      deviceSession = require('deviceSession').deviceSession

require('console-stamp')(console, { pattern: 'HH:MM:ss' })

program.name('sigmon websocket server')
       .version(cfg.version)
       .description('sigmon websocket server')

program.option('-p,--port <port>','port to listen on',cfg.server.ws.port)
       .option('-l,--host <ip>','ip to bind to',cfg.server.ws.hostname)
       .option('-i,--sync-interval <millisecs>','seconds between syncing data ',cfg.db.sync_interval)
       .option('-d,--dbfile <file>','json database file to use', `${cfg.baseDir}${cfg.db.file}`)

program.parse(process.argv)

var data = {
  lastSynced: new Date(),
  clients: {},
  devs: { ap: [], sta: [], ssid: [] },
  db: {},
  sensors: {},
  location: { lon: 0, lat: 0, sats: 0 },
  stats: { packets: 0, errors: 0, cpu: 0, dbsize: 0,
           memory: 0, aps: 0, ssids: 0, stas: 0, vendors: 0
         },
  info: { start_time: new Date(), port: program.port,
          hostname: os.hostname(), versions: process.versions,
          user: os.userInfo(), pid: process.pid, version: program.version()
        },
}

//const logger = require('../modules/logger.js')
 
console.info(`Loading Signal Monitor version ${data.info.version} on ${data.info.hostname}`)

if(cfg.db.enabled && cfg.db.autoload) {
  store.load(program.dbfile)

  store.read((err, docs) => {
    if(err) {
      console.error(err);
      program.exit(2);
    }
  
    docs.forEach(doc => {
      data.db[doc.mac] = doc
      data.db[doc.mac].sessions = new deviceSession(false, doc.sessions.sessions)

      if(doc.type == 'ap') data.devs.ap.push(doc.mac)
      else if(doc.type == 'sta') data.devs.sta.push(doc.mac)
      if(!data.devs.ssid.includes(doc.ssid)) data.devs.ssid.push(doc.ssid)
    })

    console.info(`Loaded ${Object.keys(data.db).length} devices`)
    // somehow this still misses a few dozen of the first packets sent
    // before it loads data.db ...

  })
}

function updateStats() {
  data.stats.dbsize = fs.statSync(cfg.baseDir+cfg.db.file).size
  data.stats.aps = data.devs.ap.length
  data.stats.ssids = data.devs.ssid.length
  data.stats.stas = data.devs.sta.length

  data.stats.cpu = process.cpuUsage()
  data.stats.memory = process.memoryUsage()
  data.stats.uptime = getDuration(os.uptime() * 1000)
}

// I want to do new wifiRecord or something, and put in seperate library
function newWifiDevice(packet) {
  const vendor = getVendor(packet.mac)
  const now = new Date()
  
  packet.vendor = vendor[0]
  packet.vendorSm = vendor[1]
  packet.macSm = packet.mac.substr(12,14).replace(':','')
  
  var tmp = new wifiDevice(packet)

  tmp.sessions = new deviceSession(packet)
  
  // if being re-loaded vs newly instantiated
  if(packet.hasOwnProperty('sensors'))
    tmp.sensors = packet.sensors
  else
    tmp.sensors = [packet.sensor]
      
  // shouldn't be needed anymore
  //if((tmp.channel === 0) || (tmp.channel === undefined))
  //  tmp.channel = tmp.recvchan || 0 // ??

  if(packet.rftype[0] === 0) {
    if(packet.rftype[1] == 8) {
      var booted = packet.uptime
       if(booted)
         tmp.uptime = new Date().getTime() - new Date(booted).getTime()
       
      tmp.type = 'ap'
      console.info(`+ AP '${tmp.ssid}' from ${packet.sensor} type ${tmp.vendorSm} rssi ${tmp.rssi}`)

      tmp.enctype = packet.enctype
      tmp.cyphertype = packet.cyphertype
      tmp.rates = packet.rates
      tmp.extrarates = packet.extrarates

    } else if(packet.rftype[1] == 4) {
      console.info(`+ Probe '${tmp.macSm}' for '${tmp.ssid}' from ${packet.sensor} type ${tmp.vendorSm} rssi ${tmp.rssi} seq ${tmp.seq}`)
      tmp.type = 'sta'
      tmp.hosts.push(tmp.ssid)
    }
  } else { // if(packet.rftype[0] == 2) {
    console.info(`+ STA '${tmp.macSm}' on '${tmp.ssid}' from ${packet.sensor} type ${tmp.vendorSm} rssi ${tmp.rssi} seq ${tmp.seq}`)
    tmp.type = 'sta'

    tmp.hosts.push(tmp.ssid)
  }

  if(!data.devs[tmp.type].includes(tmp.mac))
    data.devs[tmp.type].push(tmp.mac)
  
  if(!data.devs.ssid.includes(tmp.ssid))
    data.devs.ssid.push(tmp.ssid)
  
  return tmp
}

function readWifiPacket(msg) {
  const now = new Date()
  try {
    var packet = msg.data
    var sensor = msg.sensor
    
    data.location = msg.location
    
    if(data.sensors.hasOwnProperty(sensor)) {
      data.sensors[sensor].packets += 1
      data.sensors[sensor].lastseen = now
      data.sensors[sensor].location = { lon: packet.lon, lat: packet.lat }
    }
    else {
      data.sensors[sensor] = { lastseen: now,
                               firstseen: now,
                               packets: 1 }
    }
    
    if(packet.rftype[0] == 0 && packet.rftype[1] == 8 && (!data.devs.ap.includes(packet.mac)))
      data.db[packet.mac] = newWifiDevice(packet) // ap beacon

    else if(packet.rftype[0] == 0 && packet.rftype[1] == 4 && (!data.devs.sta.includes(packet.mac)))
      data.db[packet.mac] = newWifiDevice(packet) // probe request
      
    else if(packet.rftype[0] == 2) { // data packet
      var dst = packet.dst
      var src = packet.src
          
      if(data.devs.ap.includes(src)) {
        packet.mac = dst
        packet.ssid = data.db[src].ssid
        
        if(!data.db[src].hosts.includes(dst)) {
          data.db[src].hosts.push(dst)
              
          if(!data.db.hasOwnProperty(dst))
            data.db[dst] = newWifiDevice(packet)
        }
      } else
        if (data.devs.ap.includes(dst)) {
          packet.mac = src
          packet.ssid = data.db[dst].ssid
          
          if(!data.db[dst].hosts.includes(src)) {
            data.db[dst].hosts.push(src)
              
            if(!data.db.hasOwnProperty(src))
              data.db[src] = newWifiDevice(packet)
          }
      }
    } else if(data.db.hasOwnProperty(packet.mac)) {
      var output = []

      // -> tagDevice
      if(!data.db[packet.mac].tags.includes('loud') && (data.db[packet.mac].hosts.length > cfg.server.loud_client_min))
        data.db[packet.mac].tags.push('loud')
      var duration = (now.getTime() - data.db[packet.mac].lastseen.getTime())
      
      // has been seen in (4) minutes, extend session exit
      // second time seen
      if(duration < cfg.server.session_length )
        data.db[packet.mac].sessions.extend(packet)
      
      // was seen (10) minutes ago, lets see how long he was here
      if(duration > (cfg.server.session_length * 2)) {
        var enter = data.db[packet.mac].sessions.last().enter
        var exit = data.db[packet.mac].sessions.last().exit
        
        var dwelled = new Date(exit).getTime() - new Date(enter).getTime()

        // if dwelled for more than a session length and has returned, tag, and create a new sessoin
        // however, should simply extend that session, or see how it looks in a chart, could be regular device

        if(dwelled > cfg.server.session_length)
          if(!data.db[packet.mac].tags.includes('session'))
            data.db[packet.mac].tags.push('session')
         
        //if(now.getTime() - exit < (cfg.server.session_length * 4)
        // don't really start a new session
        //if(now.getTime() - exit < 3600000) // one hour
        // regular 
        //console.log(`Last session: ${new Date(enter).toLocaleString()}   for  approx.  ${getDuration(dwelled)}`)

        data.db[packet.mac].sessions.add(packet)
        
        if(data.devs.ap.includes(packet.mac))
          output.push(`> AP '${data.db[packet.mac].ssid}'`)
        else {
          output.push(`> STA '${data.db[packet.mac].macSm}'`)
            if(packet.rftype[1] == 4)
              output.push('probed')
            else if(packet.rftype[0] == 2)
              output.push('on')
            else
              output.push(`${packet.rftype[0]}:${packet.rftype[1]}`)
          
            output.push(`'${packet.ssid}'`)
        }
        
        output.push(`from ${packet.sensor} type ${data.db[packet.mac].vendorSm}`)
        output.push(`gone ${getDuration(duration)} rssi ${packet.rssi}`)
        
        if(data.devs.ap.includes(packet.mac))
          output.push(`seq ${packet.seq}`)
        /*{
          var booted = new Date(packet.uptime)
          var uptime = now.getTime() - booted.getTime()
          output.push(`Up ${getDuration(uptime)}`)
        }
        else*/ 

        // seen before, tag repeat/session
        if(!data.db[packet.mac].tags.includes['repeat'])
          data.db[packet.mac].tags.push('repeat')

        console.info(output.join(' '))
      }

      // no longer a new device
      if(data.db[packet.mac].tags.includes('new') && (now - data.db[packet.mac].firstseen < ( 10 * 60 * 1000)))
        data.db[packet.mac].tags.splice(data.db[packet.mac].tags.indexOf('new'),1)

      data.db[packet.mac].location = { lon: packet.lon, lat: packet.lat }
      data.db[packet.mac].lastseen = new Date(packet.time)
      data.db[packet.mac].rssi = packet.rssi
      data.db[packet.mac].seq = packet.seq

      data.db[packet.mac].totalPackets += 1
      data.db[packet.mac].totalBytes += packet.len
      
      if(data.db[packet.mac].type == 'sta' && (!data.db[packet.mac].hosts.includes(packet.ssid)))
        data.db[packet.mac].hosts.push(packet.ssid)
        //if(data.devs.includes(packet.ssid) && 
 
      try{if(!data.db[packet.mac].sensors.includes(packet.sensor))
        data.db[packet.mac].sensors.push(packet.sensor)}catch(e) {console.error('sensors...');console.log(data.db[packet.mac])}

      data.stats.packets += 1
    } else {
      console.error(`Capture: Unrecognized device or packet type: ${JSON.stringify(packet.rftype)} ${packet.mac}`)
      console.dir(packet)
      return
    }
  } catch (e) {
    console.error(`Decode Packet: ${e}`)
    data.stats.errors += 1
  }
}
  
function syncDB() {
  store.sync(data.db, (err, docs) => { if(err) { console.error(`Syncing: ${err}`) } })
  data.lastSynced = new Date()
}

function latest(since) {
  var out = {}
  updateStats()
  
  
  Object.keys(data.db).forEach(k => {
    var dev = data.db[k]

    if(new Date().getTime() - new Date(dev.lastseen).getTime() <= since)
      out[k] = data.db[k]
  })
  
  return { sensors: data.sensors, info: data.info, stats: data.stats, db: out }
}

const wss = new WS.Server({ port: program.port})
 
console.info(`Listening on port ${program.port}`)

var syncTimer = setInterval(syncDB, program.syncInterval)

wss.on('connection', (ws, req) => {
  const ip = req.connection.remoteAddress
  const port = req.connection.remotePort

  const id = `${ip}_${port}`

  if(!data.clients.hasOwnProperty(id))
    data.clients[id] = { mode: null, host: ip, port: port,
                    firstseen: new Date(), lastseen: new Date() }
                    

  console.info(`Connection from ${id}}`)
  
  ws.on('message', message => {
    const id = `${ws._socket._peername.address}_${ws._socket._peername.port}`
    //console.info(`Message from ${id} / ${message}`)
    
    try {
      var msg = JSON.parse(message)
    } catch (e) {
      console.error(`Bad message format from ${id}: ${message}`)
      return
    }

    data.clients[id].lastseen = new Date()
    
    if(msg.hasOwnProperty('type')) {
      if(msg.type == 'data') {
        readWifiPacket(msg)
      } else
      if(msg.type == 'log') {
        //read_log(msg)
      } else
      if (msg.type == 'status') {
        //setStatus(msg)
      } else
      if (msg.type == 'time') {
        //checkTime(msg)
      }
    } else
    if(msg.hasOwnProperty('cmd')) {
      if (msg.cmd == 'stream') {
        if(msg.hasOwnProperty('arg')) {
          if(msg.arg == 'start') {}
          else if(msg.arg == 'stop') {}
        }
      } else
      if (msg.cmd == 'latest') {
        var duration
        
        if(msg.hasOwnProperty('arg'))
          duration = parseInt(msg.arg)
        else
          duration = cfg.server.ws.subscribe_interval
        
        ws.send(JSON.stringify({ type: 'latest', location: data.location,
                                 time: new Date(), data: latest(duration)}))
      } else
      if (msg.cmd == 'status') {
        updateStats()
        ws.send(JSON.stringify({ type: 'status', time: new Date(),
                                 data: { sensors: data.sensors, stats: data.stats, info: data.info, location: data.location } }))
      } else
      if (msg.cmd == 'sensors') {
        updateStats()
        ws.send(JSON.stringify({ type: 'status', time: new Date(), data: { sensors: data.sensors } } ))

      } else
      if (msg.cmd == 'dump') {
        updateStats()
        ws.send(JSON.stringify({ type: 'dump', time: new Date(), data: { db: data.db, sensors: data.sensors,
                                                                         stats: data.stats, info: data.info, location: data.location  } }))
      } else
      if (msg.cmd == 'find') {
        if(!msg.hasOwnProperty('query') || !msg.hasOwnProperty('what')) {
          console.error(`Bad find command from ${id}`)
        }
        
        var type = msg.what
        var query = msg.query

        sendResults = (err, res) => {
          if(err === null)
            ws.send(JSON.stringify({ type: 'search', time: new Date(), data: res }))
          else
            console.error(`Search: ${err}`)
        }
        
        store.find(type, query, sendResults)
      } else
      if (msg.cmd == 'subscribe') {
        console.info(`New Subscriber: ${id}`)
        
        // subscribe to latest, subscribe to logs, subscribe to status
        // subscribe to location, etc
        if(msg.hasOwnProperty('arg'))
          duration = parseInt(msg.arg)
        else
          duration = cfg.server.ws.subscribe_interval 
        
        data.clients[id].timer = setInterval(() => { 
          const id = `${ws._socket._peername.address}_${ws._socket._peername.port}`
          
          if (ws.readyState === WS.OPEN) {
            ws.send(JSON.stringify({ type: 'latest', time: new Date(),
                                     location: data.location,
                                     data: latest(duration)}))
          } else {
            console.debug(`Connection closed, terminating ${id}`)
            try {
              ws.terminate()
              
              if(data.clients[id].hasOwnProperty('timer')) {
                clearInterval(data.clients[id].timer)
                delete data.clients[id].timer
              }
            } catch(e) {
              console.error(`Terminating connection: ${e}`)
          }
        }
        
        }, cfg.server.ws.subscribe_interval) 
        
        ws.send(JSON.stringify({ type: 'latest', time: new Date(),
                                 location: data.location,
                                 data: latest(cfg.server.ws.subscribe_interval)}))
        
      } else
      if (msg.cmd == 'unsubscribe') {
        if(data.clients[id].hasOwnProperty('timer')) {
          clearInterval(data.clients[id].timer)
          delete data.clients[id].timer
        }
      }
    } else {
      console.error(`Invalid packet: ${message}`)
    }
  })
})
